// Generated by CoffeeScript 2.3.0
var DEBUG_RE, colorEnabled, colorize, createLog, env, format, hasFlag, inspect, isDebug, log, quiet, warningsEnabled;

colorize = require('./colorize');

hasFlag = require('has-flag');

({env} = process);

quiet = function() {};

quiet.debug = function() {
  return quiet;
};

colorize(quiet, false);

if (!hasFlag('--quiet') && env.QUIET !== '1') {
  warningsEnabled = !hasFlag('--no-warnings') && env.NO_WARNINGS !== '1';
  if (typeof document === 'undefined') {
    colorEnabled = process.stdout.isTTY ? !hasFlag('--no-color') && env.NO_COLOR !== '1' : env.COLOR === '1';
    inspect = (function() {
      var opts, util;
      util = require('util');
      opts = {
        colors: colorEnabled,
        depth: 1
      };
      return function(arg) {
        return util.inspect(arg, opts);
      };
    })();
    format = function(arg, type) {
      switch (type) {
        case '%s':
          return String(arg);
        case '%O':
          return inspect(arg);
        case '%d':
        case '%f':
          return Number(arg);
        case '%i':
          return parseInt(arg);
        default:
          return arg;
      }
    };
    createLog = function(stream, prefix) {
      return function(...args) {
        var arg, i, input, match, offset, output, pattern;
        i = 0;
        output = prefix;
        if (typeof args[0] === 'string') {
          input = args[i++];
          offset = 0;
          pattern = /%[dfisO]/g;
          while (match = pattern.exec(input)) {
            arg = args[i++];
            output += input.slice(offset, match.index) + format(arg, match[0]);
            offset = match.index + 2;
          }
          output += input.slice(offset);
        }
        while (i < args.length) {
          if (i > 0) {
            output += ' ';
          }
          output += inspect(args[i++]);
        }
        stream.write(output + '\n');
      };
    };
    log = createLog(process.stdout, '');
    colorize(log, colorEnabled);
    log.warn = warningsEnabled ? createLog(process.stdout, log.yellow('‚ö†Ô∏è  warn: ')) : function() {}; // no-op
    log.error = createLog(process.stderr, log.red('üî• error: '));
  } else {
    log = console.log.bind();
    colorize(log, false);
    log.warn = warningsEnabled ? console.warn : function() {}; // no-op
    log.error = console.error;
  }
  // Warnings and errors are not disabled by --quiet
  quiet.warn = log.warn;
  quiet.error = log.error;
  if (hasFlag('--debug') || /^(\*|1)$/.test(env.DEBUG)) {
    isDebug = function() {
      return true;
    };
  } else {
    env.DEBUG = env.DEBUG.replace(/\*/g, '.*').replace(/,/g, '|');
    DEBUG_RE = new RegExp('^(' + env.DEBUG + ')$');
    isDebug = function(id) {
      return DEBUG_RE.test(id);
    };
  }
  log.debug = function(id) {
    if (isDebug(id)) {
      return log;
    } else {
      return quiet;
    }
  };
}

module.exports = log;
